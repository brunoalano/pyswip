PySWIP README
============

:version: 
	0.1.3
:author:
    Yuce Tekol. <http://www.geocities.com/yucetekol>

Introduction
------------

PySWIP is a GPL'd Python - SWI-Prolog bridge enabling to query SWI-Prolog in your Python programs.

Requirements:
* Python 2.3 and higher.
* ctypes 0.9.9.9 and higher.
* SWI-Prolog 5.6.x and higher (most probably other versions will also work).
* libpl as a shared library.
* Works on Linux and Win32, should work for all POSIX.

The core functionality of ``pyswip.prolog`` module is based on Nathan Denny's public domain prolog.py found at http://www.ahsc.arizona.edu/~schcats/projects/docs/prolog-0.2.0.html	


Install
-------

Please see ``INSTALL`` for detailed instructions.


Simple Example
--------------

A very simple example::

    >>> from pyswip.prolog import Prolog
    >>> prolog = Prolog()
    >>> prolog.assertz("father(michael,john)")
    >>> prolog.assertz("father(michael,gina)")
    >>> list(prolog.query("father(michael,X)"))
    [{'X': 'john'}, {'X': 'gina'}]
    >>> for soln in prolog.query("father(X,Y)"):
    ...     print soln["X"], "is the father of", soln["Y"]
    ...
    michael is the father of john
    michael is the father of gina


Foreign Functions Example
-------------------------

Since version 0.1.3 of PySWIP, it is possible to register a Python function as a Prolog predicate through SWI-Prolog's Foreign Function Interface. Here's an example::

    from pyswip.prolog import Prolog
    from pyswip.easy import registerForeign, getAtomChars
    
    def hello(t):
        print "Hello,", getAtomChars(t)
        return True
    hello.arity = 1
    
    registerForeign(hello)
    prolog = Prolog()
    prolog.assertz("father(michael,john)")
    prolog.assertz("father(michael,gina)")    
    list(prolog.query("father(michael,X), hello(X)"))

Outputs::
    Hello, john
    Hello, gina
